{"ast":null,"code":"var _jsxFileName = \"/home/robertpaschal/Portfolio_Project/Writing_assistant/frontend/src/components/SuggestionsList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { getAutoCompletion } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutocompleteInput = () => {\n  _s();\n  const [prompt, setPrompt] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const handleInputChange = async event => {\n    const inputValue = event.target.value;\n    setPrompt(inputValue);\n    if (inputValue.trim() !== '') {\n      try {\n        const completion = await getAutoCompletion(inputValue);\n        if (Array.isArray(completion)) {\n          setSuggestions(completion);\n        } else if (typeof completion === 'string') {\n          setSuggestions([completion]);\n        } else {\n          setSuggestions(completion);\n        }\n      } catch (error) {\n        console.error('Error fetching autocomplete suggestions:', error);\n        setSuggestions([]);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter your prompt...\",\n      value: prompt,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: suggestion\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(AutocompleteInput, \"seKK8hz1JH4bDMeBr0V28Ac8oWk=\");\n_c = AutocompleteInput;\nexport default AutocompleteInput;\nvar _c;\n$RefreshReg$(_c, \"AutocompleteInput\");","map":{"version":3,"names":["React","useState","getAutoCompletion","jsxDEV","_jsxDEV","AutocompleteInput","_s","prompt","setPrompt","suggestions","setSuggestions","handleInputChange","event","inputValue","target","value","trim","completion","Array","isArray","error","console","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","suggestion","index","_c","$RefreshReg$"],"sources":["/home/robertpaschal/Portfolio_Project/Writing_assistant/frontend/src/components/SuggestionsList.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { getAutoCompletion } from '../services/api';\n\nconst AutocompleteInput = () => {\n    const [prompt, setPrompt] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n\n    const handleInputChange = async (event) => {\n        const inputValue = event.target.value;\n        setPrompt(inputValue);\n\n        if (inputValue.trim() !== '') {\n            try {\n                const completion = await getAutoCompletion(inputValue);\n                if (Array.isArray(completion)) {\n                    setSuggestions(completion);\n                }else if (typeof completion === 'string') {\n                    setSuggestions([completion]);\n                } else {\n                    setSuggestions(completion);\n                }\n            }   catch (error) {\n                console.error('Error fetching autocomplete suggestions:', error);\n                setSuggestions([]);\n            }\n        } else {\n            setSuggestions([]);\n        }\n    };\n\n    return (\n        <div>\n            <input \n            type=\"text\"\n            placeholder='Enter your prompt...'\n            value={prompt}\n            onChange={handleInputChange}\n            />\n            <ul>\n                {suggestions.map((suggestion, index) => (\n                    <li key={index}>{suggestion}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default AutocompleteInput;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,iBAAiB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMU,iBAAiB,GAAG,MAAOC,KAAK,IAAK;IACvC,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACrCP,SAAS,CAACK,UAAU,CAAC;IAErB,IAAIA,UAAU,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1B,IAAI;QACA,MAAMC,UAAU,GAAG,MAAMf,iBAAiB,CAACW,UAAU,CAAC;QACtD,IAAIK,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE;UAC3BP,cAAc,CAACO,UAAU,CAAC;QAC9B,CAAC,MAAK,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;UACtCP,cAAc,CAAC,CAACO,UAAU,CAAC,CAAC;QAChC,CAAC,MAAM;UACHP,cAAc,CAACO,UAAU,CAAC;QAC9B;MACJ,CAAC,CAAG,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;QAChEV,cAAc,CAAC,EAAE,CAAC;MACtB;IACJ,CAAC,MAAM;MACHA,cAAc,CAAC,EAAE,CAAC;IACtB;EACJ,CAAC;EAED,oBACIN,OAAA;IAAAkB,QAAA,gBACIlB,OAAA;MACAmB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,sBAAsB;MAClCT,KAAK,EAAER,MAAO;MACdkB,QAAQ,EAAEd;IAAkB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACFzB,OAAA;MAAAkB,QAAA,EACKb,WAAW,CAACqB,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBAC/B5B,OAAA;QAAAkB,QAAA,EAAiBS;MAAU,GAAlBC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACvB,EAAA,CA1CID,iBAAiB;AAAA4B,EAAA,GAAjB5B,iBAAiB;AA4CvB,eAAeA,iBAAiB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}